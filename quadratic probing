#include<iostream>
using namespace std;
class HashTable
{
public:
	void insert(int key)
	{
		if (size>=capacity)
		{
			cout << "Bucket is full cannot insert more elements\n";
			return;
		}
		int index = HashFunction(key);
		int original_index = index;
		int i = 1;
		while (Table[index]!=-1)
		{
			index = (original_index + i * i) % capacity;
			i++;
		}
		Table[index] = key;
		size++;
	}
	void remove(int key) 
	{
		int index = HashFunction(key);
		int original_index = index;
		int i = 1;
		while (Table[index]!=-1)
		{
			if (Table[index]==key)
			{
				Table[index] = -1;
				size--;
				return;
			}
			index = (original_index + i * i) % capacity;
			i++;
		}
	}
	void display()
	{
		for (int i = 0; i < capacity; i++)
		{
			cout << "Bucket no : " << i << "{" << Table[i] << "}" << endl;
		}
	}
	bool search(int key)
	{
		int index = HashFunction(key);
		int original_index = index;
		int i = 1;
		while (Table[index]!=-1)
		{
			if (Table[index]==key)
			{
				return true;
			}
			index = (original_index + i * i) % capacity;
			i++;
		}
		return false;
	}
	HashTable(){}
	HashTable(int capacity) :capacity(capacity), size(0)
	{
		this->Table = new int[capacity];
		for (int i = 0; i < capacity; i++)
		{
			Table[i] = -1;// Initialize the hash table with -1 (representing empty slots)
		}
	}
	~HashTable() 
	{
		delete[] Table;
	}

private:
	int HashFunction(int k)
	{
		return k % capacity; // A simple hash function to map the key to an index
	}
	int* Table = NULL;
	int capacity = 0;
	int size = 0;
};
int main()
{
	HashTable hashTable(10);

	hashTable.insert(5);
	hashTable.insert(15);
	hashTable.insert(25);
	hashTable.insert(35);

	hashTable.display(); // Output: Hash Table: - - - - - 5 15 - 25 35

	std::cout << "Search 25: " << (hashTable.search(25) ? "Found" : "Not Found") << "\n\n\n"; // Output: Search 25: Found

	hashTable.remove(15);

	hashTable.display(); // Output: Hash Table: - - - - - 5 - - 25 35HashTable hashTable(10);
}
